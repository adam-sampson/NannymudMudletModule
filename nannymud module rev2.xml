<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>CharacterStats</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Detect Login</name>
				<script>send("test_prompt **** Your character name is: $name ****")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>------------------------------ GENERAL INFO -------------------------------</string>
					<string>Your last login was from</string>
					<string>You are already playing, I will remove your statue.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>0</integer>
					<integer>0</integer>
					<integer>0</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Get character name</name>
				<script>-- Workaround because I can't figure out how to get $name into var
nm_vars = nm_vars or {}

nm_vars.current_char = matches[2]</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>\*\*\*\* Your character name is: (\w+) \*\*\*\*</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>HP/SP Trigger</name>
				<script>-- capture HP for Khorne who don't have SP
-- If vars aren't set up, then initialize them.
nm_vars = nm_vars or {}
nm_vars.char = nm_vars.char or {}
nm_vars.char[nm_vars.current_char] = nm_vars.char[nm_vars.current_char] or {}

nm_vars.char[nm_vars.current_char].hp = tonumber(matches[2])
nm_vars.char[nm_vars.current_char].hpmax = tonumber(matches[3])
--nm_vars.char[nm_vars.current_char].sp = tonumber(matches[4])
--nm_vars.char[nm_vars.current_char].spmax = tonumber(matches[5])

--echo(matches[4])

GUI.Health:setValue(nm_vars.char[nm_vars.current_char].hp, 
                    nm_vars.char[nm_vars.current_char].hpmax,
                    "&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].hp .. " / " .. nm_vars.char[nm_vars.current_char].hpmax .. " HP&lt;/pre&gt;")
--GUI.Health.front:echo("    " .. nm_vars.char[nm_vars.current_char].hp .. " / " .. nm_vars.char[nm_vars.current_char].hpmax .. " HP")

-- Share hp with other open windows...
raiseGlobalEvent("multiplayer_share_hp", "Character:" .. nm_vars.current_char .. " hp:" .. nm_vars.char[nm_vars.current_char].hp .. "/" .. nm_vars.char[nm_vars.current_char].hpmax .. " sp:" .. 0 .. "/" .. 50)
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\&gt;? ?\*\* HP: (\d+)/(\d+)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>HP/SP Trigger</name>
				<script>-- Standard HP/SP trigger
-- If vars aren't set up, then initialize them.
nm_vars = nm_vars or {}
nm_vars.char = nm_vars.char or {}
nm_vars.char[nm_vars.current_char] = nm_vars.char[nm_vars.current_char] or {}

nm_vars.char[nm_vars.current_char].hp = tonumber(matches[2])
nm_vars.char[nm_vars.current_char].hpmax = tonumber(matches[3])
nm_vars.char[nm_vars.current_char].sp = tonumber(matches[4]) or 0
nm_vars.char[nm_vars.current_char].spmax = tonumber(matches[5]) or 0

--echo(matches[4])

GUI.Health:setValue(nm_vars.char[nm_vars.current_char].hp, 
                    nm_vars.char[nm_vars.current_char].hpmax,
                    "&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].hp .. " / " .. nm_vars.char[nm_vars.current_char].hpmax .. " HP&lt;/pre&gt;")
-- GUI.Health.front:echo("    " .. nm_vars.char[nm_vars.current_char].hp .. " / " .. nm_vars.char[nm_vars.current_char].hpmax .. " HP")

GUI.Mana:setValue(nm_vars.char[nm_vars.current_char].sp, 
                  nm_vars.char[nm_vars.current_char].spmax,
                  "&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].sp .. " / " .. nm_vars.char[nm_vars.current_char].spmax .. " SP&lt;/pre&gt;")
--GUI.Mana.front:echo("    " .. nm_vars.char[nm_vars.current_char].sp .. " / " .. nm_vars.char[nm_vars.current_char].spmax .. " SP")

-- Share hp with other open windows...
raiseGlobalEvent("multiplayer_share_hp", "Character:" .. nm_vars.current_char .. " hp:" .. nm_vars.char[nm_vars.current_char].hp .. "/" .. nm_vars.char[nm_vars.current_char].hpmax .. " sp:" .. nm_vars.char[nm_vars.current_char].sp .. "/" .. nm_vars.char[nm_vars.current_char].spmax)
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\&gt;? ?\*\* HP: (\d+)/(\d+)   SP: (\d+)/(\d+)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>BP Trigger</name>
				<script>-- Vampire BP trigger. Treat vampire BP as HP. 
-- If vars aren't set up, then initialize them.
nm_vars = nm_vars or {}
nm_vars.char = nm_vars.char or {}
nm_vars.char[nm_vars.current_char] = nm_vars.char[nm_vars.current_char] or {}


nm_vars.char[nm_vars.current_char].hp = tonumber(matches[2])
nm_vars.char[nm_vars.current_char].hpmax = tonumber(matches[3])
--nm_vars.char[nm_vars.current_char].sp = tonumber(matches[4])
--nm_vars.char[nm_vars.current_char].spmax = tonumber(matches[5])

--echo(matches[4])

GUI.Health:setValue(nm_vars.char[nm_vars.current_char].hp, 
                    nm_vars.char[nm_vars.current_char].hpmax,
                    "&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].hp .. " / " .. nm_vars.char[nm_vars.current_char].hpmax .. " HP&lt;pre&gt;")
--GUI.Health.front:echo("    " .. nm_vars.char[nm_vars.current_char].hp .. " / " .. nm_vars.char[nm_vars.current_char].hpmax .. " BP")

</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>\*\* BP: (\d+)/(\d+)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Health Saturation Trigger</name>
				<script>-- Capture standard healing saturation info from prompt
-- If vars aren't set up, then initialize them.
nm_vars = nm_vars or {}
nm_vars.char = nm_vars.char or {}
nm_vars.char[nm_vars.current_char] = nm_vars.char[nm_vars.current_char] or {}

nm_vars.char[nm_vars.current_char].thirst = tonumber(matches[2])
nm_vars.char[nm_vars.current_char].full = tonumber(matches[3])
nm_vars.char[nm_vars.current_char].drunk = tonumber(matches[4])
nm_vars.char[nm_vars.current_char].hsat = tonumber(matches[5])

GUI.Full:setValue(nm_vars.char[nm_vars.current_char].full,100,"| " .. nm_vars.char[nm_vars.current_char].full .. "%" .. " Full")
--GUI.Full.front:echo("    " .. nm_vars.char[nm_vars.current_char].full .. "%" .. " Full")
--GUI.Back.front:echo("    " .. nm_vars.char[nm_vars.current_char].full .. "%" .. " Full")
GUI.Thirst:setValue(nm_vars.char[nm_vars.current_char].thirst,100,"| " .. nm_vars.char[nm_vars.current_char].thirst .. "%" .. " Thirst")
--GUI.Thirst.front:echo("    " .. nm_vars.char[nm_vars.current_char].thirst .. "%" .. " Thirst")
GUI.Drunk:setValue(nm_vars.char[nm_vars.current_char].drunk,100,"| " .. nm_vars.char[nm_vars.current_char].drunk .. "%" .. " Drunk")
--GUI.Drunk.front:echo("    " .. nm_vars.char[nm_vars.current_char].drunk .. "%" .. " Drunk")
GUI.Hsat:setValue(nm_vars.char[nm_vars.current_char].hsat,100,"| " .. nm_vars.char[nm_vars.current_char].hsat .. "%" .. " Hsat")
--GUI.Hsat.front:echo("    " .. nm_vars.char[nm_vars.current_char].hsat .. "%" .. " Hsat")

--deleteLine()
--echo("\n&gt;")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>&lt;Thirst: (\d+)% Full: (\d+)% Drunk: (\d+)% HSat:(\d+)%&gt;</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Health Saturation Trigger</name>
				<script>-- Capture standard healing saturation info from prompt
-- If vars aren't set up, then initialize them.
nm_vars = nm_vars or {}
nm_vars.char = nm_vars.char or {}
nm_vars.char[nm_vars.current_char] = nm_vars.char[nm_vars.current_char] or {}

nm_vars.char[nm_vars.current_char].thirst = tonumber(matches[2])
nm_vars.char[nm_vars.current_char].full = tonumber(matches[3])
nm_vars.char[nm_vars.current_char].drunk = tonumber(matches[4])
nm_vars.char[nm_vars.current_char].hsat = tonumber(matches[5])

GUI.Full:setValue(nm_vars.char[nm_vars.current_char].full,100,"&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].full .. "%" .. " Full&lt;/pre&gt;")
--GUI.Full.front:echo("    " .. nm_vars.char[nm_vars.current_char].full .. "%" .. " Full")
--GUI.Back.front:echo("    " .. nm_vars.char[nm_vars.current_char].full .. "%" .. " Full")
GUI.Thirst:setValue(nm_vars.char[nm_vars.current_char].thirst,100,"&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].thirst .. "%" .. " Thirst&lt;/pre&gt;")
--GUI.Thirst.front:echo("    " .. nm_vars.char[nm_vars.current_char].thirst .. "%" .. " Thirst")
GUI.Drunk:setValue(nm_vars.char[nm_vars.current_char].drunk,100,"&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].drunk .. "%" .. " Drunk&lt;/pre&gt;")
--GUI.Drunk.front:echo("    " .. nm_vars.char[nm_vars.current_char].drunk .. "%" .. " Drunk")
GUI.Hsat:setValue(nm_vars.char[nm_vars.current_char].hsat,100,"&lt;pre&gt; " .. nm_vars.char[nm_vars.current_char].hsat .. "%" .. " Hsat&lt;/pre&gt;")
--GUI.Hsat.front:echo("    " .. nm_vars.char[nm_vars.current_char].hsat .. "%" .. " Hsat")

--deleteLine()
selectString(matches[1],1)
setBgColor(getBgColor())
setFgColor(getFgColor())
replace("&gt;")
--cecho("&lt;green&gt;&gt;\n&lt;:green&gt;")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>&lt;\-Thirst: (\d+)% Full: (\d+)% Drunk: (\d+)% HSat: (\d+)%\-&gt;</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>multiplayer</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>CommCaptureChain</name>
				<script>-- For multi-line tells we need a chain that captures anything afterwards...

--showMultimatches()

local comfrom = matches[2]
local comtype = matches[3]
local comtext = matches[4]

-- Ignore Sylvester, monk
if comfrom == "monk" then
  setTriggerStayOpen("CommCaptureChain",0)
  return
end

--echo(comtext)
--GUI.CommRow.Cons:echo("\n" .. getTime(true))
--GUI.CommRow.Cons:echo("\n" .. comfrom .. " " .. comtype .. " " .. NannymudVariables.currentcharacter .. ": " .. comtext)

-- Share communication with other open windows...
raiseGlobalEvent("multiplayer_share_communication", "\n" .. getTime(true))
raiseGlobalEvent("multiplayer_share_communication", "\n" .. comfrom .. " " .. comtype .. " " .. NannymudVariables.currentcharacter .. ": " .. comtext)
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>100</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>(.+) (tells) you: (.+)</string>
					<string>(\w+) (says): (.+)</string>
					<string>(\w+) (whispers) to you: (.+)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CommMoreLines</name>
					<script>local commtext = string.trim(matches[2])

--GUI.CommRow.Cons:echo(" " .. commtext)

-- Share communication with other open windows...
raiseGlobalEvent("multiplayer_share_communication", " " .. commtext)
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^    (.+)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CommCloseChain</name>
					<script>--echo("CommCloseString: ")
--echo(matches[1])
--echo("\n")
local stringin = matches[1]

local stringcheck = nil
local stringcheck = string.match(stringin,"tells you:") or stringcheck
local stringcheck = string.match(stringin,"says:") or stringcheck
local stringcheck = string.match(stringin,"whispers to you:") or stringcheck

if stringcheck == nil then
  --echo("CommCloseString")
  setTriggerStayOpen("CommCaptureChain",0)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?![\s]).*</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>LineCaptureChain</name>
				<script>-- For multi-line tells we need a chain that captures anything afterwards...

--showMultimatches()

local comtext = matches[1]

--echo(comtext)
--GUI.CommRow.Cons:echo("\n" .. getTime(true))
--GUI.CommRow.Cons:echo("\n" .. comtext)

-- Share communication with other open windows...
--raiseGlobalEvent("multiplayer_share_communication", "\n" .. getTime(true))
--raiseGlobalEvent("multiplayer_share_communication", "\n" .. comtext)
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>100</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>\[.+?\].+</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>LineMoreLines</name>
					<script>local commtext = string.trim(matches[2])

--GUI.CommRow.Cons:echo(" " .. commtext)

-- Share communication with other open windows...
--raiseGlobalEvent("multiplayer_share_communication", " " .. commtext)
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^    (.+)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>LineCloseChain</name>
					<script>--echo("CommCloseString: ")
--echo(matches[1])
--echo("\n")
local stringin = matches[1]

local stringcheck = nil
local stringcheck = string.match(stringin,"^%[") or stringcheck

if stringcheck == nil then
  --echo("CommCloseString")
  setTriggerStayOpen("LineCaptureChain",0)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?![\s]).*</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Monks</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Detect Meditate</name>
				<script>nm_vars.char[nm_vars.current_char].meditate = 1</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You start meditating.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Detect Meditate</name>
				<script>nm_vars.char[nm_vars.current_char].meditate = 1</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You slowly awaken from your meditation.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage>
		<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
			<name>heartbeat</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
		</Timer>
	</TimerPackage>
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>color_parse</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="no" isFolder="no">
				<name>set colours</name>
				<script>send("colour armour boldunderlineyellow")
send("colour attack boldgreen")
send("colour attacked boldunderlinegreen")
send("colour container boldyellow")
send("colour dark_pri white")
send("colour dark_runes black boldblack")
send("colour dark_tell boldblack")
send("colour dark_told boldunderlineblack")
send("colour druids_told boldunderlineblack")
send("colour enter boldwhite")
send("colour exit boldcyan")
send("colour hpinfo boldred")
send("colour killed black white")
send("colour knight_told boldunderlineblack")
send("colour leave underlinewhite")
send("colour lepers_told boldunderlineblack")
send("colour long cyan")
send("colour misc_in_long yellow")
send("colour monks_told boldunderlineblack")
send("colour monster underlinemagenta")
send("colour monster_enter boldwhite")
send("colour monster_leave underlinewhite")
send("colour paragon_told boldunderlineblack")
send("colour party boldblack")
send("colour player boldmagenta")
send("colour prompt boldgreen")
send("colour replied boldunderlineblack")
send("colour reply boldblack")
send("colour said boldunderlineblack")
send("colour say boldblack")
send("colour shape_info magenta")
send("colour short blue cyan")
send("colour simyarin_told boldunderlineblack")
send("colour tell boldblack")
send("colour told boldunderlineblack")
send("colour vampires_told boldunderlineblack")
send("colour vikings_told boldunderlineblack")
send("colour weapon boldunderlineyellow")
send("colour whisper boldblack")
send("colour whispered boldunderlineblack")</script>
				<command></command>
				<packageName></packageName>
				<regex>/setcolours</regex>
			</Alias>
		</AliasGroup>
		<Alias isActive="yes" isFolder="no">
			<name>; command spliter</name>
			<script>for command in string.gmatch(matches[1], "[^;]+") do
  -- echo(count)
  --echo("Command : " .. command)
	expandAlias(command)
end</script>
			<command></command>
			<packageName></packageName>
			<regex>.+;.+</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>speedwalk</name>
			<script>--for count, direction in string.gmatch(matches[2], "([0-9])([neswdu])") do	
--echo(matches[3])

-- Note, ^(\.\.?)(.*)$ allows any characters, but ^(\.\.?)([^;]*)$ prohibits
-- using ; because this is being used by other aliases as a line splitter.
if(matches[2] == ".") then
  for count, direction in string.gmatch(matches[3], "(%d+)(%D+)") do
    --echo(count)
    --echo(direction)
  	count = (count == "" and 1 or count)
    --echo(direction)
    calc_dir = direction
    --if(matches[2] == "..") then
    --  calc_dir = reverseDirection(direction)
    --end
    --echo(calc_dir)
  	--for i=1, count do send(direction) end
    for i=1, count do send(calc_dir) end
  end
else 
  -- reverse the order of the pairs
  local rev_pairs = ""
  for pair in string.gmatch(matches[3],"%d+%D+") do
    rev_pairs = pair .. rev_pairs
  end
  for  count, direction in string.gmatch(rev_pairs, "(%d+)(%D+)") do
  	count = (count == "" and 1 or count)
    -- reverse the direction nw = se (not wn)
    calc_dir = reverseDirection(direction)
    for i=1, count do send(calc_dir) end
  end
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(\.\.?)([^;]*)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>autowalk ./loc or ../loc</name>
			<script>-- requires locations to be stored in variable locations_table
-- see script add_locations to add locations from csv format
if locations_table == nil then
  echo("Error: locations_table not set up.")
  return
end

if matches[2] == "." then
  directions = locations_table[matches[3]].full_to
else 
  directions = locations_table[matches[3]].full_from
end

echo(directions)
expandAlias(directions)</script>
			<command></command>
			<packageName></packageName>
			<regex>^(\.\.?)\/(.*)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>Check Health Saturation</name>
			<script></script>
			<command>test_prompt &lt;Thirst: $soak Full: $full Drunk: $tox HSat:
$hsat&gt;</command>
			<packageName></packageName>
			<regex>/tox</regex>
		</Alias>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>multiplayer</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>multiplayer forward command</name>
				<script>local charshort = matches[2]
local command = matches[3]
--echo(charshort .. ". " .. command .. "\n")
local charlong = "Error"
if charshort == "hh" then
  charlong = "Helix"
elseif charshort == "bb" then
  charlong = "Bulls"
elseif charshort == "mm" then
  charlong = "Mac"
elseif charshort == "qq" then
  charlong = "Qantaqa"
elseif charshort == "tt" then
  charlong = "Theshadow"
elseif charshort == "nn" then
  charlong = "Necksnapper"
else
  charlong = "Error2"
end
--echo(charlong .. " " .. command .. "\n")
raiseEvent("multiplayer_share_command",charlong .. " " .. command)
raiseGlobalEvent("multiplayer_share_command",charlong .. " " .. command)</script>
				<command></command>
				<packageName></packageName>
				<regex>^(hh|ll|rr|qq|tt|nn) (.+)</regex>
			</Alias>
		</AliasGroup>
		<Alias isActive="yes" isFolder="no">
			<name>Set Prompt</name>
			<script>-- Set prompt for the trigger to auto-grab your toxicity constantly</script>
			<command>set_prompt &lt;-Thirst: $soak Full: $full Drunk: $tox HSat: $hsat-&gt;</command>
			<packageName></packageName>
			<regex>/set_prompt</regex>
		</Alias>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Monk Aliases</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="no" isFolder="no">
				<name>Pick Herbs From Scroll</name>
				<script></script>
				<command>e;e;ph;ph;e;ph;ph;s;ph;ph;s;ph;n;w;ph;ph;n;w;w</command>
				<packageName></packageName>
				<regex>^/phfs</regex>
			</Alias>
			<Alias isActive="no" isFolder="no">
				<name>Pick Herbs From Chapel</name>
				<script></script>
				<command>n;n;e;e;ph;ph;e;ph;ph;s;ph;ph;s;ph;n;w;ph;ph;n;w;w;s;s</command>
				<packageName></packageName>
				<regex>^/phfc</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<Script isActive="yes" isFolder="no">
			<name>reverse_direction</name>
			<packageName></packageName>
			<script>reverse_direction_cases = reverse_direction_cases or {
  ["n"] = "s",
  ["s"] = "n",
  ["e"] = "w",
  ["w"] = "e",
  ["ne"] = "sw",
  ["se"] = "nw",
  ["sw"] = "ne",
  ["nw"] = "se",
  ["u"] = "d",
  ["d"] = "u",
  ["enter"] = "out",
  ["in"] = "out",
  ["out"] = "in",
  ["climb mountain"] = "climb down"
}

function reverseDirection(direction)
  -- echo("Arg  : " .. direction .. "\n")
  local rev_dir = switch(reverse_direction_cases,direction)
  --echo("Dir " .. direction .. " reverses to " .. rev_dir .. "\n")
  if rev_dir == nil then rev_dir = direction end
  return rev_dir
end -- end function

-- Register the event handler.
--registerAnonymousEventHandler("reverse_direction", "reverseDirection")</script>
			<eventHandlerList />
		</Script>
		<Script isActive="yes" isFolder="no">
			<name>switch</name>
			<packageName></packageName>
			<script>-- Wasn't able to find a case when / switch function in Mudlet...so here's one. 
switch = function(cases,arg)
  -- return assert (loadstring ('return ' .. cases[arg]))()
  return(cases[arg])
end

-- Example:
--local case = 3 
--local result = switch({
--  [0] = "0",
--  [1] = "2^1+" .. case,
--  [2] = "2^2+" .. case,
--  [3] = "2^3+" .. case
--},
--case
--)
--print(result)</script>
			<eventHandlerList />
		</Script>
		<Script isActive="yes" isFolder="no">
			<name>add_locations</name>
			<packageName></packageName>
			<script>-- WARNING!!! Saving this file will run the code.
-- this is a function to add directions to a table for quick lookup.
-- it would be preferable to keep this list in csv/excel, but at this time
-- I'm not able to figure out how to import that sort of file yet.

local overwrite = true

-- Intead of figuring out how to load file...copy csv file below
csv_string = [[
alias,desc,full_to,full_from,safe_to_delta,safe_from_delta,monsters,equipment,other
dark,To Dark Guild,.4w9n1d2w5n,..4w9n1d2w5n,,,,,Dark Guild Advance Room
chaos,Dak to Chaos,.1out2e2nw1w1nw2w1nw1d2n1w,..1enter dak2e2nw1w1nw2w1nw1d2n1w,,,,,From Inside Dak Simyar Gate to Chaos Advance
monk,To Monk Guild,.3s2w2n1e2s,..3s2w2n1e2s,,,,,Monk Chapel
kh,To Khorne Heal,.9w7s2w3s1d,..9w7s2w3s1d,,,,,To Khorn Heal Room
cult,To Cult Guild,.4w4n1w4n1ne1n,..4w4n1w4n1ne1n,,,,,To Cult Guild
vamp,To Vampires Guild,.9w2n5w1n1nw1enter2e,..9w2n5w1n1nw1enter2e,,,,,To Vampires Guild
sim,To Simyarin,.27w1enter gate6w1enter dak,out;..27w1enter gate6w,,,,,To Simyarin Guild
kheal,Khorne Heal,./kh;heal;../kh,,,,,,Automatically heal a Khorne
phfc,Pick Herbs From Chapel,.2n2e2ph1e2ph1s2ph1s1ph1n1w2ph1n2w2s,,,,,,
phfs,Pick Herbs From Scroll,.2e2ph1e2ph1s2ph1s1ph1n1w2ph1n2w,,,,,,
recycler,Recycler of Things,.4w2s1w2s3sw2s1e3s1w1n,..4w2s1w2s3sw2s1e3s1w1n,,,,,Recycler of things for quest
fp,Frog Pub,.5w3s1call eagle1w3n3w1climb1jump2n1d1enter hut,.1out1se1swim3s1e1n1enter boat9n,,,,,Good priced pub
mh,Monk Healer,.14w3n2w1n1w1sw,..14w3n2w1n1w1sw,,,,,say heal my mind
tkp,Three Kings Pub,.6w7s1w,..6w7s1w,,,,,"Good priced pub. 3 hp only, 4 sp only."
tsp,Tall Ships Pub,.9s2e1se2e1ne4e1s1e,..9s2e1se2e1ne4e1s1e,,,,,special balances hp and sp
]]

if locations_table == nil or overwrite == true then
  locations_table = locations_table or {}
  csv_lines = string.split(csv_string,"\n")
  for i,v in ipairs(csv_lines) do
    --echo(i .. " : ")
    --echo(string.trim(v) .. "\n")
    -- Skip the header line...must enter correct order
    line = string.trim(v)
    if(i ~= 1 and line ~= "") then
      line_split = string.split(line,",")
      --display(line_split)
      locations_table[line_split[1]] = {
        -- alias = -- Set as table index...
        desc = line_split[2],
        full_to = line_split[3],
        full_from = line_split[4],
        safe_to_delta = line_split[5],
        safe_from_delta = line_split[6],
        monsters = line_split[7],
        equipment = line_split[8],
        other = line_split[9]
      }
    end
  end
end</script>
			<eventHandlerList />
		</Script>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>multiplayer</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>multiplayer_share_hp</name>
				<packageName></packageName>
				<script>-- This is the function that will be called when the event is raised.
-- "event" is set to the event name.
-- "arg" is the argument(s) provided with raiseEvent/rasieGlobalEvent.
-- "profile" - Is the profile name from where the raiseGlobalEvent where triggered from
--             It is 'nil' if raiseEvent() was used.
function onMultiplayerShareHp(event, arg, profile)
  -- echo("Event: " .. event .. "\n")
  -- echo("Arg  : " .. arg .. "\n")
  -- If the event is not raised with raiseGlobalEvent() profile will be 'nil'
  -- echo("Profile: " .. (profile or "Local") .. "\n")
  
  local mpchar = string.match(arg, "Character:(%w+)")
  local mphp = tonumber(string.match(arg, "hp:(%d+)"))
  local mphpmax = tonumber(string.match(arg, "hp:%d+/(%d+)"))
  local mpsp = tonumber(string.match(arg, "sp:(%d+)"))
  local mpspmax = tonumber(string.match(arg, "sp:%d+/(%d+)"))
  --echo("Test: " .. mpchar .. mphp .. mphpmax .. mpsp .. mpspmax)
  
  nm_vars = nm_vars or {}
  nm_vars.char = nm_vars.char or {}
  nm_vars.char[mpchar] = nm_vars.char[mpchar] or {}
  
  nm_vars.char[mpchar].hp = mphp
  nm_vars.char[mpchar].hpmax = mphpmax
  nm_vars.char[mpchar].sp = mpsp
  nm_vars.char[mpchar].spmax = mpspmax
  
  MpSlot(mpchar,mphp,mphpmax,mpsp,mpspmax)
  --echo("\n")
  --echo(table.size(GUI.Health))
  --echo(" ")
  --echo(table.size(GUI.nosuchitem))
end

-- Register the event handler.
registerAnonymousEventHandler("multiplayer_share_hp", "onMultiplayerShareHp")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>multiplayer_share_command</name>
				<packageName></packageName>
				<script>-- This is the function that will be called when the event is raised.
-- "event" is set to the event name.
-- "arg" is the argument(s) provided with raiseEvent/rasieGlobalEvent.
-- "profile" - Is the profile name from where the raiseGlobalEvent where triggered from
--             It is 'nil' if raiseEvent() was used.
function onMultiplayerParseCommand(event, arg, profile)
  -- echo("Event: " .. event .. "\n")
  -- echo("Arg  : " .. arg .. "\n")
  -- If the event is not raised with raiseGlobalEvent() profile will be 'nil'
  -- echo("Profile: " .. (profile or "Local") .. "\n")
  --echo(arg)
  local mpchar = string.match(arg, "^(%w+)")
  local mpcommand = string.match(arg, "%w+ (.+)")
  --echo("Char " .. mpchar)
  --echo("Command " .. mpcommand)
  
  local currentchar = nm_vars.current_char

  if string.lower(mpchar) == string.lower(currentchar) then
    expandAlias(mpcommand)
  end

end

-- Register the event handler.
registerAnonymousEventHandler("multiplayer_share_command", "onMultiplayerParseCommand")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="no" isFolder="no">
				<name>multiplayer_share_communication</name>
				<packageName></packageName>
				<script>-- This is the function that will be called when the event is raised.
-- "event" is set to the event name.
-- "arg" is the argument(s) provided with raiseEvent/rasieGlobalEvent.
-- "profile" - Is the profile name from where the raiseGlobalEvent where triggered from
--             It is 'nil' if raiseEvent() was used.
function onMultiplayerParseCommunication(event, arg, profile)
  --GUI.CommRow.Cons:echo(arg)
end

-- Register the event handler.
registerAnonymousEventHandler("multiplayer_share_communication", "onMultiplayerParseCommunication")</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>GUI</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>CSS Man</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
-- CSSMan by Vadi. Public domain.

CSSMan = {}
CSSMan.__index = CSSMan

function CSSMan.new(stylesheet)
  local obj  = { stylesheet = {} }
  setmetatable(obj,CSSMan)
  local trim = string.trim

  assert(type(stylesheet) == "string", "CSSMan.new: no stylesheet provided. A possible error is that you might have used CSSMan.new, not CSSMan:new")

  for line in stylesheet:gmatch("[^\r\n]+") do
    local attribute, value = line:match("^(.-):(.-);$")
    if attribute and value then
      attribute, value = trim(attribute), trim(value)
      obj.stylesheet[attribute] = value
    end
  end

  return obj
end

function CSSMan:set(key, value)
  self.stylesheet[key] = value
end

function CSSMan:get(key)
  return self.stylesheet[key]
end

function CSSMan:getCSS(key)
  local lines, concat = {}, table.concat
  for k,v in pairs(self.stylesheet) do lines[#lines+1] = concat({k,": ", v, ";"}) end
  return concat(lines, "\n")
end

function CSSMan:gettable()
  return self.stylesheet
end

function CSSMan:settable(tbl)
  assert(type(tbl) == "table", "CSSMan:settable: table expected, got "..type(tbl))

  self.stylesheet = tbl
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Set Borders</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
local w,h = getMainWindowSize()
-- no left side window
setBorderLeft(0)
-- no top window
setBorderTop(0)
-- Empty a rectangle 1/40th of the height of the window on bottom
-- for quick reference hp/sp/stats
setBorderBottom(h/40)
-- no right side window
setBorderRight(0)</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Set Background</name>
				<packageName></packageName>
				<script>-- Set backgrounds for the other areas of the setWindow
-- Initialize variables as needed
GUI = GUI or {}

-- A slightly different color for other windows to createGauge
-- visual separation
GUI.BackgroundCSS = CSSMan.new([[
  background-color: rgb(20,20,20);
]])

GUI.Bottom = Geyser.Label:new({
  name = "GUI.Bottom",
  x = "0%", y = "97%",
  width = "100%",
  height = "3%",
})
GUI.Bottom:setStyleSheet(GUI.BackgroundCSS:getCSS())</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Gauges</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
-- A slightly different color for other windows to createGauge
-- visual separation
GUI.BackgroundCSS = CSSMan.new([[
  background-color: rgb(20,20,20);
]])

GUI.Footer = Geyser.HBox:new({
  name = "GUI.Footer",
  x = 0, y = 0,
  width = "100%",
  height = "100%",
},GUI.Bottom)

GUI.FooterLeft = Geyser.HBox:new({
  name = "GUI.FooterLeft",
  x = 0, y = 0,
  width = "50%",
  height = "100%",
},GUI.Footer)

GUI.FooterRight = Geyser.HBox:new({
  name = "GUI.FooterRight",
  x = 0, y = 0,
  width = "50%",
  height = "100%",
},GUI.Footer)

GUI.GaugeBackCSS = CSSMan.new([[
  background-color: rgba(0,0,0,0);
  border-style: solid;
  border-color: white;
  border-width: 1px;
  border-radius: 5px;
  margin: 5px;
]])

GUI.GaugeFrontCSS = CSSMan.new([[
  background-color: rgba(0,0,0,0);
  border-style: solid;
  border-color: white;
  border-width: 1px;
  border-radius: 5px;
  margin: 5px;
]])

GUI.Health = Geyser.Gauge:new({
  name = "GUI.Health",
  --width = "25%", height = "100%",
},GUI.FooterLeft)
--},GUI.LeftColumn)
GUI.Health.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","red")
GUI.Health.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
--GUI.Health:setValue(202,202)
--GUI.Health.front:echo("GUI.Health")

GUI.Mana = Geyser.Gauge:new({
  name = "GUI.Mana",
  --width = "25%", height = "100%",
},GUI.FooterLeft)
--},GUI.RightColumn)
GUI.Mana.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","blue")
GUI.Mana.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
--GUI.Mana:setValue(202,202)
--GUI.Mana.front:echo("GUI.Mana")

GUI.Full = Geyser.Gauge:new({
  name = "GUI.Full",
  --width = "25%", height = "100%",
},GUI.FooterRight)
--},GUI.RightColumn)
GUI.Full.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","green")
GUI.Full.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
--GUI.Mana:setValue(202,202)
--GUI.Full.front:echo("GUI.Full")

GUI.Thirst = Geyser.Gauge:new({
  name = "GUI.Thirst",
  --width = "25%", height = "100%",
},GUI.FooterRight)
--},GUI.RightColumn)
GUI.Thirst.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","green")
GUI.Thirst.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
--GUI.Mana:setValue(202,202)
--GUI.Thirst.front:echo("GUI.Thirst")

GUI.Drunk = Geyser.Gauge:new({
  name = "GUI.Drunk",
  --width = "25%", height = "100%",
},GUI.FooterRight)
--},GUI.RightColumn)
GUI.Drunk.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","green")
GUI.Drunk.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
--GUI.Mana:setValue(202,202)
--GUI.Drunk.front:echo("GUI.Drunk")

GUI.Hsat = Geyser.Gauge:new({
  name = "GUI.Hsat",
  --width = "25%", height = "100%",
},GUI.FooterRight)
--},GUI.RightColumn)
GUI.Hsat.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","green")
GUI.Hsat.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
--GUI.Mana:setValue(202,202)
--GUI.Hsat.front:echo("GUI.Hsat")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Multiplayer Guages</name>
				<packageName></packageName>
				<script>-- Multiplayer gagues
GUI.mp = GUI.mp or {}
--if GUI.mp == nil then 
--  GUI.mp = Geyser.Container:new({
--    name = "GUI.mp",
--    x = "75%", y = "0",
--    width = "23%", height = "20%",
--    backgroundcolor
--    --message = "TestMp",
--  })
--end

mpSlotCount = mpSlotCount or 1

function MpSlot(char_in,hp_in,hpmax_in,sp_in,spmax_in)
  if GUI.mp[char_in] == nil then  
    --local get_mp_new_y_offset = table.size(GUI.mp)
    
    --echo("MP size: " .. get_mp_new_y_offset)
    GUI.mp[char_in] = Geyser.HBox:new({
      -- name = "GUI.Lightbender",
      name = "GUI." .. char_in,
      x = "70%", y = (25 * mpSlotCount) - 25,
      width = "29%", height = "3%",
      bgColor = "white",
    --},GUI.mp)
    })
    --GUI.mp[char_in]:setColor(20,20,20)
    mpSlotCount = mpSlotCount + 1
  --end
  
    GUI.mp[char_in].MpChar = Geyser.Label:new({
      name = char_in .. "Label",
      x = 0, y = 0,
      width = "25%", height = "100%",
      fgColor = "white",
      color = "black",
      -- message = "Lightbender: "
      message = char_in .. ": "
    },GUI.mp[char_in])
    GUI.mp[char_in].MpChar:setColor(20,20,20)
    
    GUI.mp[char_in].MpHealth = Geyser.Gauge:new({
      -- name = "GUI.mp.Lightbender.MpHealth",
      name = "GUI.mp." .. char_in .. ".MpHealth",
    },GUI.mp[char_in])
    GUI.mp[char_in].MpHealth.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
    GUI.GaugeFrontCSS:set("background-color","red")
    GUI.mp[char_in].MpHealth.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
    --GUI.mp[char_in].MpHealth:setValue(100,202)
    GUI.mp[char_in].MpHealth:setValue(hp_in,hpmax_in,"&lt;pre&gt; " .. hp_in .. "/" .. hpmax_in .. " HP&lt;/pre&gt;")
    --GUI.mp[char_in].MpHealth.front:echo(hp_in .. "/" .. hpmax_in .. " HP")
    GUI.mp[char_in].MpHealth:setColor(20,20,20)
    
    GUI.mp[char_in].MpMana = Geyser.Gauge:new({
      -- name = "GUI.mp.Lightbender.MpMana",
      name = "GUI.mp." .. char_in .. ".MpMana",
    },GUI.mp[char_in])
    GUI.mp[char_in].MpMana.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
    GUI.GaugeFrontCSS:set("background-color","blue")
    GUI.mp[char_in].MpMana.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
    --GUI.Mana:setValue(202,202)
    GUI.mp[char_in].MpMana:setValue(sp_in,spmax_in,"&lt;pre&gt; " .. sp_in .. "/" .. spmax_in .. " SP&lt;/pre&gt;")
    --GUI.mp[char_in].MpMana.front:echo(sp_in .. "/" .. spmax_in .. " HP")
    GUI.mp[char_in].MpMana:setColor(20,20,20)
  else
    GUI.mp[char_in].MpHealth:setValue(hp_in,hpmax_in,"&lt;pre&gt; " .. hp_in .. "/" .. hpmax_in .. " HP&lt;/pre&gt;")
    GUI.mp[char_in].MpMana:setValue(sp_in,spmax_in,"&lt;pre&gt; " .. sp_in .. "/" .. spmax_in .. " SP&lt;/pre&gt;")
  end
end

--MpSlot("Qantaqa",100,186,120,186)</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
